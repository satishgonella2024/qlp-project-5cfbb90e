{
  "code": "import os
from typing import List
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from pydantic import BaseModel
import bcrypt
import secrets
import aioredis
import uvicorn

# Environment variables
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
REDIS_HOST = os.getenv('REDIS_HOST')
REDIS_PORT = int(os.getenv('REDIS_PORT'))

# Rate limiting
RATE_LIMIT = int(os.getenv('RATE_LIMIT', '100'))
RATE_LIMIT_PERIOD = int(os.getenv('RATE_LIMIT_PERIOD', '60'))

# Initialize app and security
app = FastAPI()
security = HTTPBasic()

# Pydantic models
class Book(BaseModel):
    id: int
    title: str
    author: str
    description: str

class BookCreate(BaseModel):
    title: str
    author: str
    description: str

# In-memory data store (replace with a database)
books: List[Book] = []

# Redis for rate limiting
redis = None

# Authentication
async def get_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = secrets.compare_digest(credentials.username, ADMIN_USERNAME)
    correct_password = secrets.compare_digest(credentials.password, ADMIN_PASSWORD)
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail='Incorrect username or password',
            headers={'WWW-Authenticate': 'Basic'},
        )
    return credentials.username

# Rate limiting middleware
@app.middleware('http')
async def rate_limit_middleware(request, call_next):
    # Check if rate limit is enabled
    if RATE_LIMIT > 0:
        # Get client IP
        client_ip = request.client.host
        
        # Initialize Redis connection
        global redis
        if not redis:
            redis = await aioredis.create_redis_pool((REDIS_HOST, REDIS_PORT))
        
        # Get request count for client IP
        request_count = await redis.get(client_ip)
        if request_count:
            request_count = int(request_count)
        else:
            request_count = 0
        
        # Increment request count
        request_count += 1
        await redis.setex(client_ip, RATE_LIMIT_PERIOD, request_count)
        
        # Check if rate limit is exceeded
        if request_count > RATE_LIMIT:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail='Too many requests',
            )
    
    # Call next middleware
    response = await call_next(request)
    return response

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=['https://example.com'],  # Replace with your allowed origins
    allow_credentials=True,
    allow_methods=['GET', 'POST', 'PUT', 'DELETE'],
    allow_headers=['*'],
)

# Secure headers
@app.middleware('http')
async def set_secure_headers(request, call_next):
    response = await call_next(request)
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
    response.headers['Content-Security-Policy'] = "default-src 'self'"
    return response

# CRUD operations
@app.get('/books', response_model=List[Book], dependencies=[Depends(get_current_user)])
async def get_books():
    return books

@app.post('/books', response_model=Book, status_code=status.HTTP_201_CREATED, dependencies=[Depends(get_current_user)])
async def create_book(book: BookCreate):
    new_book = Book(
        id=len(books) + 1,
        title=book.title,
        author=book.author,
        description=book.description,
    )
    books.append(new_book)
    return new_book

@app.put('/books/{book_id}', response_model=Book, dependencies=[Depends(get_current_user)])
async def update_book(book_id: int, book: BookCreate):
    for i, b in enumerate(books):
        if b.id == book_id:
            books[i] = Book(
                id=book_id,
                title=book.title,
                author=book.author,
                description=book.description,
            )
            return books[i]
    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Book not found')

@app.delete('/books/{book_id}', status_code=status.HTTP_204_NO_CONTENT, dependencies=[Depends(get_current_user)])
async def delete_book(book_id: int):
    for i, b in enumerate(books):
        if b.id == book_id:
            del books[i]
            return
    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Book not found')

if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=8000)
",
  "tests": "import os
import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

# Test data
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')

# Authentication helper
def get_auth_headers():
    return {
        'Authorization': 'Basic ' + (f'{ADMIN_USERNAME}:{ADMIN_PASSWORD}').encode('base64').decode('utf-8')
    }

def test_create_book():
    headers = get_auth_headers()
    data = {
        'title': 'Test Book',
        'author': 'Test Author',
        'description': 'Test Description'
    }
    response = client.post('/books', json=data, headers=headers)
    assert response.status_code == 201
    assert response.json()['title'] == 'Test Book'

def test_get_books():
    headers = get_auth_headers()
    response = client.get('/books', headers=headers)
    assert response.status_code == 200
    assert len(response.json()) > 0

def test_update_book():
    headers = get_auth_headers()
    data = {
        'title': 'Updated Book',
        'author': 'Updated Author',
        'description': 'Updated Description'
    }
    response = client.put('/books/1', json=data, headers=headers)
    assert response.status_code == 200
    assert response.json()['title'] == 'Updated Book'

def test_delete_book():
    headers = get_auth_headers()
    response = client.delete('/books/1', headers=headers)
    assert response.status_code == 204

def test_unauthorized_access():
    response = client.get('/books')
    assert response.status_code == 401

def test_rate_limiting():
    # Set a low rate limit for testing
    os.environ['RATE_LIMIT'] = '3'
    os.environ['RATE_LIMIT_PERIOD'] = '1'

    # Make requests to trigger rate limiting
    for _ in range(3):
        response = client.get('/books')
        assert response.status_code != 429

    response = client.get('/books')
    assert response.status_code == 429

    # Reset rate limit
    del os.environ['RATE_LIMIT']
    del os.environ['RATE_LIMIT_PERIOD']
",
  "documentation": "This is a Python FastAPI application that implements a RESTful API for managing books with CRUD operations. The application includes several security features, such as authentication, rate limiting, input validation, and secure headers. The code follows best practices for secure coding and includes error handling and validation.",
  "dependencies": [
    "fastapi",
    "pydantic",
    "bcrypt",
    "aioredis",
    "uvicorn"
  ]
}